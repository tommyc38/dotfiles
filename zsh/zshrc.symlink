export DOTFILES=$HOME/dotfiles
export ZSH=$DOTFILES/zsh

# Auto-load vault password if file exists (after DOTFILES is set)
# This password corresponds to the encrypted files in /vault
VAULT_PASSWORD_FILE="$DOTFILES/vault-key/password.txt"
if [ -f "$VAULT_PASSWORD_FILE" ]; then
    export VAULT_PASSWORD=$(cat "$VAULT_PASSWORD_FILE" 2>/dev/null)
    if [ -n "$VAULT_PASSWORD" ]; then
        echo "Vault password loaded from $VAULT_PASSWORD_FILE"
    fi
fi

# Setup SSH agent and add keys (only if needed)
# With macOS keychain (--apple-use-keychain), keys are automatically loaded when needed
# Only run setup if: agent isn't running OR no keys are loaded
if [ -f "$DOTFILES/bin/ssh-setup.sh" ] && [ -d "$DOTFILES/vault-key" ] && [ -z "$INTELLIJ_ENVIRONMENT_READER" ] ; then
    # Check if ssh-agent is running and has keys
    if ! ssh-add -l >/dev/null 2>&1; then
        # Agent not running or no keys loaded - run setup
        echo "Running ssh-setup.sh from .zshrc"
        source "$DOTFILES/bin/ssh-setup.sh"
    fi
fi

export NVIM=$HOME/.config/nvim
export VIM_PLUGINS=$HOME/.vim/plugged
export VIM_THEME_FILE=$DOTFILES/vim/custom-plugins/darcula/colors/darcula.vim
export CUSTOM_BIN=$DOTFILES/bin/
export VMS=$HOME/vagrant_boxes/
export ANDROID_HOME=/Users/tomconley/Library/Android/sdk

# Load ZSH files
for config in $ZSH/**/*.zsh; do
    if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
      source $config
    fi
done

# Add work environments - See workenv.sh script to make env switching easier.
if [[ -f ~/.workrc ]]; then
    if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
        source $HOME/.workrc
    fi
fi

# workenv function wrapper for easier environment switching
workenv() {
    . $DOTFILES/bin/workenv.sh "$@"
}

# check for custom bin directory and add to path
if [[ -d ~/bin ]]; then
    export PATH=~/bin:$PATH
fi

# Add custom scripts
export PATH=$DOTFILES/bin:$PATH


# Webstorm command line tools
export PATH="/Applications/WebStorm.app/Contents/MacOS:$PATH"

# Use coreutiles without the prefix g
if [[ "$(uname)" == "Darwin" && "$(command -v brew)" ]]; then
  if [[ -z "$HOMEBREW_PREFIX" ]]; then
    if [[ -x "/opt/homebrew/bin/brew" ]]; then
      # Apple Silicon Macs
      HOMEBREW_PREFIX="/opt/homebrew"
      export PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
    elif [[ -x "/usr/local/bin/brew" ]]; then
      # Intel Macs
      HOMEBREW_PREFIX="/usr/local"
      export PATH="/usr/local/bin:$PATH"
    fi
  fi
fi

# Make vim your default editor
export EDITOR="nvim"

# make output of ls color code file/dir types
alias ls="ls --color"
export LS_COLORS='or=5;31:mi=5:ow=01;91'

alias info='info --vi-keys'
#this will allow vi navigation when using the info command


if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
  autoload -U compinit add-zsh-hook
  compinit -i
  BASE16_SHELL="$HOME/.config/base16-shell/"
  [ -n "$PS1" ] && \
      [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
          eval "$("$BASE16_SHELL/profile_helper.sh")"
fi

# Post install for the autojump package.
if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
    [[ "$(uname)" == "Darwin" && -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh
fi

# initialize autocomplete and syntax highlighting
if [ -z ${DOTFILES_LOADED+x} ]; then

    if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
      if [[ "$(uname)" == "Darwin" ]]; then
        # install zsh-syntax-highlighting
        source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        # install zsh autosuggestions -(TIP -in vi mode use standard motions to expend suggestions)
        source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
      else
        source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
      fi
    fi
fi

export NVM_DIR="$HOME/.nvm"
if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
    [ -s "$NVM_DIR/nvm.sh"  ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

export NVM_SYMLINK_CURRENT=true # This allows IDEs to use a single place to set your node version

export DOTFILES_LOADED=1

# Functions that require a zsh hook should be added here

if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
    for config ($ZSH/**/*completion.sh) source $config
fi

# https://stackoverflow.com/questions/30840651/what-does-autoload-do-in-zsh
if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
    autoload -U add-zsh-hook
fi

if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
  add-zsh-hook chpwd load-nvmrc # Runs this function every time to the pwd changes.
fi

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"      # This makes pyenv functions available in the shell
    eval "$(pyenv virtualenv-init -)" # This enables pyenv-virtualenv functionality
fi
